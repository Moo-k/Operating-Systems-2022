Tutorial 3 - answers
Q1. If the wait() and signal() semaphore operations are not executed atomically, under which circumstances the mutual exclusion may be violated? Consider processes P1 and P2, and assume that the critical section is between wait() and signal() operation for each process.

A. The initial semaphore value == 0, P1 performs wait() operation and then P2 performs signal() operation.
B. The initial semaphore value == 1, P1 performs signal() operation and then P2 performs wait() operation.
C. Two signal() operations are executed on a semaphore when its value == 1.
D. Two wait() operations are executed on a semaphore when its value == 1.
E. None of the above choices is correct.

Solution: Option D is correct. If two wait() operations are executed on a semaphore when its value is 1 and the operations are not performed atomically, then both operations might decrement the semaphore value, thereby violating mutual exclusion.

 

Q2. What is the difference between signaled and non-signaled states with Windows dispatcher objects?

A. An object that is in the signaled state is available, and a thread will not block when it tries to acquire it. When the lock is acquired, it is in the non-signaled state.
B. Signaled means the semaphore value is zero. Non-signaled means the semaphore value is greater than zero.
C. An object that is in the signaled state is NOT available. An object is in non-signaled state when it is available.
D. Signaled means the process acquiring the object is in a running state. Non-signaled means the process is in waiting state.
E. An object that is in the signaled state is it's a locked mutex. An object is in non-signaled state when it is an unlocked mutex.

Solution: Option A is correct. An object that is in the signaled state is available, and a thread will not block when it tries to acquire it. When the lock is acquired, it is in the non-signaled state. When the lock is released, it transitions back to the signaled state.

 

Q3.  Which of the following is NOT a deadlocks example?

A. A thread is waiting to enter a critical section that is currently occupied by another thread. The critical section is protected by a mutex lock.
B. Two cars crossing a single-lane bridge from opposite directions.
C. A person going down a ladder while another person is climbing up the ladder.
D. Two trains travelling toward each other on the same track.
E. Two processes are waiting indefinitely for an event that can be caused only by the other process.

Solution: Option A is correct. It is maintained by a mutex lock and it is not a deadlocks example.